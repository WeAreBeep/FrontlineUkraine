name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
  ARM_SKIP_PROVIDER_REGISTRATION: true

  APP_DATA_SUPPLIERS_SHEET: "${{ secrets.APP_DATA_SUPPLIERS_SHEET }}"
  APP_EMAIL_FROMADDRESS: "${{ secrets.APP_EMAIL_FROMADDRESS }}"
  APP_EMAIL_SENDGRIDKEY: "${{ secrets.APP_EMAIL_SENDGRIDKEY }}"
  APP_EMAIL_SENDGRIDUSER: "${{ secrets.APP_EMAIL_SENDGRIDUSER }}"
  APP_EMAIL_TOADDRESS: "${{ secrets.APP_EMAIL_TOADDRESS }}"
  APP_MAPBOX_TOKEN: "${{ secrets.APP_MAPBOX_TOKEN }}"
  APP_RECAPTCHA_SECRETKEY: "${{ secrets.APP_RECAPTCHA_SECRETKEY }}"
  APP_RECAPTCHA_SITEKEY: "${{ secrets.APP_RECAPTCHA_SITEKEY }}"
  APP_DATACONTEXT: "${{ secrets.APP_DATACONTEXT }}"
  WEB_USERSECRETSID: "${{ secrets.WEB_USERSECRETSID }}"

  SQL_ADMIN_PASSWORD: ${{ secrets.SQL_ADMIN_PASSWORD }}

  CONTENTFUL_DELIVERY_ACCESS_TOKEN: "${{ secrets.CONTENTFUL_DELIVERY_ACCESS_TOKEN }}"
  CONTENTFUL_SPACE_ID: "${{ secrets.CONTENTFUL_SPACE_ID }}"
  CONTENTFUL_ENVIRONMENT: "${{ secrets.CONTENTFUL_ENVIRONMENT }}"

  POSTTAG_ENDPOINT: "${{ secrets.POSTTAG_ENDPOINT }}"
  POSTTAG_ID: "${{ secrets.POSTTAG_ID }}"
  POSTTAG_API_KEY: "${{ secrets.POSTTAG_API_KEY }}"

  AUTHGEAR_CLIENT_ID: "${{ secrets.AUTHGEAR_CLIENT_ID }}"
  AUTHGEAR_ENDPOINT: "${{ secrets.AUTHGEAR_ENDPOINT }}"

  WHAT3WORDS_API_KEY: "${{ secrets.WHAT3WORDS_API_KEY }}"

jobs:  
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
           username: ${{ secrets.ACR_USERNAME }}
           password: ${{ secrets.ACR_PASSWORD }}
           login-server: ${{ secrets.ACR_SERVER }}

      - name: Build and push
        run: DOCKER_REGISTRY='frontlineukraineacr2.azurecr.io/' TAG='${{ github.run_number }}' make docker-build docker-push

  deploy_dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment: Development

    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform
        run: ./deploy_terraform.sh 
        shell: bash
        working-directory: ./src/infra
        env: 
          DEPLOY_WORKSPACE: dev
          ENVIRONMENT_NAME: Development
          CORE_CUSTOM_DOMAIN_LIST: '[]'
          CORE_SERVER_HOST: ''
          PUBLICWEB_CUSTOM_DOMAIN_LIST: '[]'
          PUBLICWEB_PUBLIC_URL: ''
          PUBLICWEB_API_ENDPOINT: ''
          CORE_CORS_ALLOWED_ORIGINS: '[]'
          WEB_CUSTOM_DOMAIN_LIST: '[]'
          WEBSITE_CANONICAL_URL: ""
          

  deploy_prod:
    runs-on: ubuntu-latest
    needs: deploy_dev

    environment: Production

    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform
        run: ./deploy_terraform.sh 
        shell: bash
        working-directory: ./src/infra
        env: 
          DEPLOY_WORKSPACE: prod
          ENVIRONMENT_NAME: Production
          CORE_CUSTOM_DOMAIN_LIST: '[]'
          CORE_SERVER_HOST: ''
          CORE_CORS_ALLOWED_ORIGINS: '[]'
          PUBLICWEB_CUSTOM_DOMAIN_LIST: '[]'
          PUBLICWEB_PUBLIC_URL: ''
          PUBLICWEB_API_ENDPOINT: ''
          WEB_CUSTOM_DOMAIN_LIST: '[]'
          WEBSITE_CANONICAL_URL: ""
